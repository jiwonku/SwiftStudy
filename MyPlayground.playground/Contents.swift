import UIKit

/* 스위프트
 1. 헤더파일을 작성할 필요가 없음.
 2. 스위프트는 대/소문자를 구분함.
 3. 함수와 메소드, 인스턴스명의 첫 글자는 소문자로
 4. 클래스와 구조체, 프로토콜등 객체의 첫 글자는 대문자로

 5. 구문 끝의 세미콜론은 생략 가능함.
 => 단 한줄에 두개 이상의 구문을 작성할 때는 세미콜론으로 구분해 주어야 함.
 
 6.엔트리 포인트(메인함수)가 없음
 => UIApplicationMain 이라는 어노테이션을 사용하여 앱을 시작하는 객체를 지정해야 함.
 
 7. 문자열과 문자 모두 큰 따옴표를 사용함.
 
 8. 프로젝트 내 다른 클래스에 선언된 객체를 호출 할 때 별도의 import 구문 없이도 참조가 가능함.
 => import는 프레임워크나 외부 라이브러리를  사용하기 위한 목적으로만 사용됨.
 
*/



/* 변수와 상수
 
 * 임의의 값을 저장한 혹은 저장할 메모리 주소값을 이름으로 연결해 놓은 것을 변수와 상수라고함.
 
 1. 변수 :
 => 저장된 값을 변경할 수 있음.
 => 값을 변경할 때는 처음 저장했던 값과 일치하는 티입이어야 함.
 => var 키워드를 사용함
  
 
 2. 상수 :
 => 저장된 값을 변경할 수 없음.
 => 굳이 상수가 필요없을 것 처럼 보이지만, 프로그래밍 소스 관리 목적상 변하지 않는 값은 상수에 저장하는 것이 훨씬 효율적임.
 => 실수로 변경되는 일을 막을 수 있고, 값의 성격이 명확히 분류되므로 관리하기에도 용이함.
 => let 키워드를 사용함.
 
 
 * 변수와 상수는 선언후에 사용해야 함 => 이러이러한 변수 혹은 상수를 사용하겠다는 것을 컴파일러에게 알려주기 위함.
 
 */




/*
 => 10이라는 값이 a라는 변수에 할당되었음 = a라는 변수를 선언하면서 10이라는 값을 대입하였음.
 => a라는 변수는 여기서 선언 및 초기화가 되었고, 10은 정수 이므로 a는 정수형 타입이 되었음.
 => 앞으로 a는 정수형 값만 할당되어야 함.
 =>처음 값을 대입할 때는 '=' 연산자가 사용됨.
 => 10이라는 값을 분석해서 정수형인지 판단하는 것은 컴파일러가 함.
 
 타입 추론 : 변수나 상수의 선언 시 입력된 초기값을 이용하여 가장 적절한 타입을 추론해 내는 과정.
 스위프트에서 변수와 상수는 선언하는 시점에서 타입이 결정되어야 하는데, 선언과 동시에 값을 초기화 하면 자동으로 타입을 결정할 수 있음.
 
*/
var a = 10



//a는 변수이므로 이와 같이 값을 변경할 수 있음.
a = 20


//상수를 선언 및 초기화를 하고
let b = 40

//b = 50 // 상수를 변경하려고 하므로 에러가 발생.



/*
 선언및 초기화를 분리할 때는 하기와 같은 방법을 사용
 변수의 타입을 타입 어노테이션으로 직접 정의해 줌.
 year라는 변수의 타입을 int(정수)형으로 사용하겠다고 선언.
 그리고 year에 정수값을 넣어줌.
 
 타입 어노테이션 : 변수나 상수를 선언할 때 그 타입을 명시적으로 선언해 줌으로써 컴파일러에게 어떤 타입의 값이 저장될 것인지 직접 알려주는 문법.
 
 선언과 초기화가 분리된 구문으로 작성될 경우 타입 추론을 위한 데이터가 없어서 타입 추론을 할 수 없음.
 이 경우 타입 어노테이션으로 타입을 직접 지정해 주어야 함.
 
 */
var year:Int
year = 2021




/* 자료형
 
 스위프트에서 데이터들끼리의 연산은 같은 데이터 타입(자료형) 끼리만 가능함.
 그렇기 때문에 스위프트에서 변수나 상수를 정의할 때 반드시 숫자, 문자, 문자열, 논리 등 몇가지 종류의 타입을 지정하고 그에 맞추어 사용해야 합니다.
 */

/*
 1. Int
 => 정수를 뜻하는 Integer라는 영어 단어의 줄임말.
 => 부호 있는 정수값을 저장하는데 사용함.
 => 8비트 cpu의 경우 -128 부터 127까지 저장 가능함.
 => 16비트, 32 비트 도 가능함
 => int8 , int16, int 32 과 같이 특정하여 지정할 수도 있음.
 => int로 선언하면 해당 컴퓨터의 cpu 비트 크기에 맞추어 자동으로 그 크기가 변화함.
 */

Int.max
Int.min

Int8.max
Int8.min


/*
 2. Uint
 => Unsinged int
 => 부호가 없는 정수를 의미함 = 양수만 사용가능
 => - 범위의 정수를 저장 할 수 없는 대신 + 범위의 정수에 대해서 일반 int 보다 두배 큰 범위까지 저장할 수 있음.
 => int와 동일하게, uint, uint8, uint16.. 등으로 서브 자료형이 있음.
 
 */


/*
 3. Double & Float
 => 정수가 아닌 실수값을 저장(소수점)
 => double : 64bit
 => flaot : 32bit
 => double이 float보다 훨씬 더 세밀한 값을 저장하는데 유리함 & 메모리에서 차지하는 크기도 더 큼.
 
 */


/*
 4. Bool
 => true/false 두 가지 종류의 값만 가질 수 있는 자료형
 => 논리값을 저장하기 위해 사용됨.
 => 조검문의 결과를 표현하는 데에도 많이 사용됨.
  
 */


/*
 5. String
 => 문자열을 저장할 때 사용됨.
 => 큰 따옴표를 사용해서 문자열을 표현함.
 */

var text = "hello world"


/*
 6. character
 => 한 개의 문자를 저장할 수 있는 단일 자료형
 */


/*
 스위프트는 서로 다른 타입의 변수나 상수는 결합 연산은 허용되지 않음.
 다른 타입으로 변경해야 할 필요가 있다면, 바꾸고자 하는 타입의 새로운 객체를 명시적으로 생성하야 함.
 
 */

var stmt = "올해 연도는"
var thisYear = 2020

var result = stmt + String(thisYear)



/*문자열 템플릿
 새로운 스트링 객채를 만들 필요 없이 \ , () 를 통해서 변수나 상수를 문자열 안에 포함시킬 수 있음
 또한 괄호 내부의 값을 계산할 수도 있음.
 
 */

let name = "The date"
let year2 = 2021
let month = 5
let day = 30

let date = "\(name) is \(year2) \(month) \(day)"

let apple = 3
let banana = 4
let orange = 5

let desc = "Fruit's count is total \(apple + banana + orange)"

let result2 = "the value which is added from 1 to 5 is \(1 + 2 + 3 + 4 + 5)"
print(result2)


/*
 쿼우팅

 
 
 */

let hello = "hello world"
var world = hello
print(world)

//hello = "a"
world = "hi"


/*
 멀티 라인 스트링
 큰 따옴표 세개를 연속으로 붙여서 쿼우팅 영역의 시작과 끝을 정의하고 그 내부에서 자유롭게 작성된 문자열을 그대로 실제 내용으로 처리하는 방식
 
 * 시작 쿼우팅 다음에는 반드시 줄바꿈 후 값을 작성해야 함
 * 멀티라인 스트링의 입력을 끝낼 때에는 반드시 줄바꿈 후 쿼우팅 처리해야 함. 쿼우팅을 종료하는 라인에서는 쿼우팅 앞에 어떤 값도 들어갈 수 없다.
 * 멀티라인 쿼우팅 내부에 특수문자(\t , \n)등이 들어가면 문자 그대로 출력됨.
 
 
 */

let poem = """
계절이 지나가는 하늘에는
가을로 가득 차 있습니다.
나는 아무 걱정도 없이 가슴 속의 별들을
다 헬 듯 합니다.
"""

print(poem)
